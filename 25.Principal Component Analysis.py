# -*- coding: utf-8 -*-
"""25.Principal Component Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JqlDJG43bLYNkYP8QUWVMpX-dfT6VCJw

# **Principal Component Analysis**
"""

# importing libraries
import pandas as pd
import numpy as np
from sklearn.datasets import load_digits #our dataset
from sklearn.decomposition import PCA #importing PCA
from sklearn.preprocessing import MinMaxScaler
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt

"""### **Loading Dataset of Digits**"""

dataset=load_digits()

# keys: they act like labels or names that let you access specific values.
dataset.keys()

# here first param represents the total dataiteams are second param represents the pixels/features
dataset.data.shape

dataset.data[0]

# reshaping 1D into 2D array, 64 pixels can also be written as 8x8
dataset.data[0].reshape(8,8)

# showing the actual image
plt.gray()
plt.matshow(dataset.data[7].reshape(8,8))

# target values
np.unique(dataset.target)

dataset.target[7]

# creating a dataframe of the actual data to scale it later and to manipulate it
df=pd.DataFrame(dataset.data, columns=dataset.feature_names)
df.head()

df.describe()

"""### **Min Max Scaling**"""

# scaling to get accurate results
scaler=MinMaxScaler()

x=df
y=dataset.target

x_scaled=scaler.fit_transform(x)

"""### **Applying Logistic Regression Before PCA**"""

x_train,x_test,y_train,y_test=train_test_split(x_scaled,y,test_size=0.2,random_state=42)

model=LogisticRegression()

model.fit(x_train,y_train)

model.score(x_test,y_test)

"""### **Applying Principal Component Analysis**"""

# it can also be written as 0.95, means preserve 95% of the variance
pca=PCA(n_components=30)

x_pca=pca.fit_transform(x)
x_pca.shape

pca.n_components_

"""### **Applying Logistic Regression After PCA**"""

x_train_pca,x_test_pca,y_train,y_test=train_test_split(x_pca,y,test_size=0.2,random_state=42)

model.fit(x_train_pca,y_train)

model.score(x_test_pca,y_test)

