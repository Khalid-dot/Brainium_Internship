# -*- coding: utf-8 -*-
"""15.Decision Trees.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t0Hi1RLntRayW3Qqk9tHQwnlkboY0AGU

# **Decision Trees**
"""

# loading Libraries
from sklearn.datasets import load_iris
from sklearn.datasets import fetch_california_housing
from sklearn.metrics import mean_squared_error
from sklearn.metrics import accuracy_score
from sklearn.tree import DecisionTreeClassifier #loading decision tree classifier
from sklearn.tree import DecisionTreeRegressor #loading decision tree regressor
from sklearn.model_selection import train_test_split

# loading datasets
iris=load_iris()
housing=fetch_california_housing()

# specifying input and output
x1,y1=iris.data,iris.target
x2,y2=housing.data,housing.target

"""## **Decision Tree Classifier**



"""

x_train,x_test,y_train,y_test=train_test_split(x1,y1,test_size=0.3,random_state=42)

# loading DecisionTreeClassifier and specifying the criterion=gini
# max depth 1 : root, max depth 2 : children, max depth 3 : grandchildren
clf=DecisionTreeClassifier(criterion='gini',max_depth=3,random_state=42)

clf.fit(x_train,y_train)

y_pred=clf.predict(x_test)

print("Classification Accuracy: ",accuracy_score(y_test,y_pred))

"""**Testing**"""

# New sample (must be in 2D array form)
new_data = [[5.1, 3.5, 1.4, 0.2]]

# Predict class
prediction = clf.predict(new_data)
print("Predicted class (numeric):", prediction)
print("Predicted species:", iris.target_names[prediction][0])

"""## **Decision Tree Regressor**

"""

x_train,x_test,y_train,y_test=train_test_split(x2,y2,test_size=0.2,random_state=42)

# loading DecisionTreeClassifier and specifying the criterion=squared error (mean sqaured error)
rgs=DecisionTreeRegressor(criterion='squared_error',max_depth=3,random_state=42)

rgs.fit(x_train,y_train)

y_pred=rgs.predict(x_test)

print("Regression MSE: ",mean_squared_error(y_test,y_pred))

"""**Testing**"""

# Pick one sample from X_test (input features)
new_data = [x_test[0]]   # this has the right number of features (8 for California housing)

# Predict continuous value
prediction = rgs.predict(new_data)
print("Predicted value:", prediction[0])
print("Actual value:", y_test[0])

