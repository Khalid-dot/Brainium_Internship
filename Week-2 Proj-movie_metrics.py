# -*- coding: utf-8 -*-
"""Week2Proj-Movie_Metrics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1boT3mRNbHLU6_xU29TCvuwKKJCV8sdZ0

# **Week 2 Project: Movie Ratings Analysis**

## **Data Cleaning and Preprocessing**
"""

# importing libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# loading dataset
movie=pd.read_csv("/content/movie_reviews.csv")
movie

# removing any duplicate values
movie=movie.drop_duplicates()
movie

# droping any unneceassry column
movie=movie.drop(columns="Original_Language")
movie

# checking for null values
movie.isnull().sum()

# cleaning data
movie["Rating"]=movie["Rating"].str.replace("/10","",regex=False)
movie["Rating"]=movie["Rating"].astype(float)

# checking for 0.0 values in the columns
# Domestic %
mask = movie["Domestic %"].apply(lambda x: float(x) == 0.0)
print("Total '0.0' values in Domestic %:", mask.sum().sum())
# $Worldwide
mask = movie["$Worldwide"].apply(lambda x: float(x) == 0.0)
print("Total '0.0' values in $Worldwide:", mask.sum().sum())
# $Domestic
mask = movie["$Domestic"].apply(lambda x: float(x) == 0.0)
print("Total '0.0' values in $Domestic:", mask.sum().sum())
# $Foreign
mask = movie["$Foreign"].apply(lambda x: float(x) == 0.0)
print("Total '0.0' values in $Foreign:", mask.sum().sum())
# Foreign %
mask = movie["Foreign %"].apply(lambda x: float(x) == 0.0)
print("Total '0.0' values in Foreign %:", mask.sum().sum())
# Rating
mask = movie["Rating"].apply(lambda x: float(x) == 0.0)
print("Total '0.0' values in Rating:", mask.sum().sum())
# Vote_Count
mask = movie["Vote_Count"].apply(lambda x: float(x) == 0.0)
print("Total '0.0' values in Vote_Count:", mask.sum().sum())

# replacing the 0 values with NaN
movie["Domestic %"] = movie["Domestic %"].replace(0.0, np.nan)
movie["$Domestic"] = movie["$Domestic"].replace(0.0, np.nan)
movie["$Foreign"] = movie["$Foreign"].replace(0.0, np.nan)
movie["Foreign %"] = movie["Domestic %"].replace(0.0, np.nan)
movie["Rating"] = movie["Rating"].replace(0.0, np.nan)
movie["Vote_Count"] = movie["Vote_Count"].replace(0.0, np.nan)

# replacing the null values with median values
movie["$Domestic"]=movie["$Domestic"].fillna(movie["$Domestic"].median())
movie["Domestic %"]=movie["Domestic %"].fillna(movie["Domestic %"].median())
movie["$Foreign"]=movie["$Foreign"].fillna(movie["$Foreign"].median())
movie["Foreign %"]=movie["Foreign %"].fillna(movie["Foreign %"].median())
movie["Rating"]=movie["Rating"].fillna(movie["Rating"].median())
movie["Vote_Count"]=movie["Vote_Count"].fillna(movie["$Domestic"].median())

# checking for n/a values in case we missed it
mask = movie.applymap(lambda x: str(x).lower() == "n/a")
print("Total 'n/a' values:", mask.sum().sum())

# replacing the missing genre with most frequent values
movie["Genres"]=movie["Genres"].fillna(movie["Genres"].mode()[0])

# replacing the missing Production_Countries with most frequent values
movie["Production_Countries"]=movie["Production_Countries"].fillna(movie["Production_Countries"].mode()[0])

movie

movie.isnull().sum()

# adding a new column based on the rating
def grade_from_rating(r):
    if r >= 8:
        return 'A'
    elif r >= 6:
        return 'B'
    elif r >= 4:
        return 'C'
    else:
        return 'D'

movie["Grade"] = movie["Rating"].apply(grade_from_rating)

movie

"""## **Data Visualization**

### **Scatter Plot**
"""

# plotting scatter plot based on domestic vs worldwide gross sale
sns.scatterplot(data=movie, x="$Domestic", y="$Worldwide", hue="Grade")
plt.title("Domestic Budget vs Worldwide Gross by Grade")
plt.xlabel("Domestic Budget ($)")
plt.ylabel("Worldwide Gross ($)")
plt.show()

"""### **Box Plot**"""

# plotting boxplot plot based on grade vs rating
sns.boxplot(data=movie, x="Grade", y="Rating")
plt.title("Rating Distribution by Grade")
plt.show()

"""### **Histograph**"""

# caluclating profit margin from worldwide and domestic sale
movie["Profit_Margin"] = (movie["$Worldwide"] - movie["$Domestic"]) / movie["$Domestic"]
# plotting histograph based on the recently calculated profit margin
sns.histplot(movie["Profit_Margin"], bins=30, kde=True)
plt.title("Distribution of Profit Margin")
plt.show()

"""### **BarPlot**"""

# caluclating average rating based on rating
avg_rating = movie.groupby("Grade")["Rating"].mean().reset_index()
# plotting barplt based on the recently calculated paverage rating
sns.barplot(data=avg_rating, x="Grade", y="Rating")
plt.title("Average Rating by Grade")
plt.show()

"""### **HeatMap**"""

# plotting a heatmap based on different parameters
corr = movie[["$Worldwide","$Domestic","$Foreign","Domestic %","Foreign %","Rating","Vote_Count"]].corr()
sns.heatmap(corr, annot=True, fmt=".2f", cmap="coolwarm")
plt.title("Correlation Heatmap")
plt.show()

