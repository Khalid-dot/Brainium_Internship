# -*- coding: utf-8 -*-
"""11.Polynomial Regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SUMsrTy6uqp0zRJiTCqthngHJObk4vIz

# **Polynomial Regression**
"""

#importing necessary libaries for dataframes and numerical data
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# importing Linear Regression class from the scikit Learn Library
from sklearn.linear_model import LinearRegression

# importing polynomial class from the scikit Learn Library
from sklearn.preprocessing import PolynomialFeatures

"""Reshapes the array into a 2D column vector.<br>
-1 tells NumPy: “figure out this dimension automatically”.<br>
1 means → 1 column.<br>

In NumPy, whenever you use .reshape(rows, cols), you’re telling NumPy:<br>
"Make it into a 2-dimensional array with this many rows and columns."<br>
"""

# Sample data (1 feature)
x=np.array([1,2,3,4,5]).reshape(-1,1)
y=np.array([1.8,12,33,74,135]) #not exactly x^3

"""This code shows how to fit a polynomial regression (degree=3), turning x into [1, x, x²,x³], training a linear model on it, predicting results, and visualizing the quadratic curve.<br>

although we have already defined the value of y which is x^3, but it acts only as a toy dataset to demonstrate that polynomial regression can rediscover the polynomial relationship. In real-world data, you won’t know the true formula — the model learns it for you.<br>

The red dots are your noisy dataset (not perfectly x³).<br>
The blue curve is the parabola that best fits this data.<br>
"""

poly=PolynomialFeatures(degree=3) #tells sklearn to add polynomial terms up to degree 3
x_poly=poly.fit_transform(x)

model=LinearRegression() #Create a LinearRegression model
model.fit(x_poly,y) #Train it on polynomial features (x_poly) to learn relationship between x and y.

# Predicts y values using the trained model
y_pred=model.predict(x_poly)

"""### **Starting Visualization for better Understanding**

"""

plt.scatter(x,y,color='red', label='Noisy Data')
plt.plot(x,y_pred,color='blue', label='Fitted Curve')
plt.xlabel('x')
plt.ylabel('y')
plt.title("Polynomial Regression (Degree: 3)")
plt.legend()
plt.show()

"""**Printing Intercept and Coefficient**"""

print("Intercept: ",model.intercept_)
print("Coefficient: ",model.coef_)