# -*- coding: utf-8 -*-
"""Week-3 Proj-HousePrice_Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FK45LensQuysKqrWEw5RLu79Y2m3U0Rn

# **Week 3 Project: House Price Prediction**

### **Importing Libraries**
"""

# importing libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# removes warnings from the outputs
import warnings
warnings.filterwarnings('ignore')

# reading data
df=pd.read_csv('/content/Housing.csv')
df

"""### **Preprocessing**"""

df.isnull().sum()

# filling the null values with medians
price_median=np.floor(df['price'].median())
area_median=np.floor(df['area'].median())
bedrooms_median=np.floor(df['bedrooms'].median())
bathrooms_median=np.floor(df['bathrooms'].median())
stories_median=np.floor(df['stories'].median())
parking_median=np.ceil(df['parking'].mean())
print('Price: ',price_median)
print('Area: ',area_median)
print('Bedrooms: ',bedrooms_median)
print('Bathrooms: ',bathrooms_median)
print('Stories: ',stories_median)
print('Parking: ',parking_median)

df['price']=df['price'].fillna(price_median)
df['area']=df['area'].fillna(area_median)
df['bedrooms']=df['bedrooms'].fillna(bedrooms_median)
df['bathrooms']=df['bathrooms'].fillna(bathrooms_median)
df['stories']=df['stories'].fillna(stories_median)
df['parking']=df['parking'].fillna(parking_median)

df.isnull().sum()

# finding shape of the dataset
df.shape

# looking for duplicate rows
df[df.duplicated()]

# finding categories in the column
df['furnishingstatus'].unique()

"""**Encoding**"""

df['mainroad']=df['mainroad'].map({'yes':1,'no':0})
df['guestroom']=df['guestroom'].map({'yes':1,'no':0})
df['basement']=df['basement'].map({'yes':1,'no':0})
df['hotwaterheating']=df['hotwaterheating'].map({'yes':1,'no':0})
df['airconditioning']=df['airconditioning'].map({'yes':1,'no':0})
df['prefarea']=df['prefarea'].map({'yes':1,'no':0})
df['furnishingstatus']=df['furnishingstatus'].map({'furnished':2,'semi-furnished':1,'unfurnished':0})

df

"""**spliting inputs & outputs**"""

x=df.drop('price', axis=1)
y=df['price']

"""### **Model Training before Regularization**

random state will fix the randomness in the data. Instead of 2, any number could be placed
"""

# importing test_train split library
from sklearn.model_selection import train_test_split
train_x,test_x,train_y,test_y=train_test_split(x,y,test_size=0.3,random_state=2)

# importing library for performing Linear Regression
from sklearn.linear_model import LinearRegression
reg=LinearRegression().fit(train_x,train_y)

# printing results
print('-------------Before Regularization-------------')
print('\nTraining Accuracy: ',reg.score(train_x,train_y))
print('Testing Accuracy: ',reg.score(test_x,test_y))

"""### **Model Training before Regularization**"""

# importing library for regularization
from sklearn.linear_model import Ridge, Lasso

"""alpha controls how strong the penalty (regularization) is.<br>
Higher alpha → more penalty → coefficients shrink more.<br>
Lower alpha → less penalty → coefficients are closer to normal Linear Regression.<br>
alpha=0 → no penalty at all → same as plain Linear Regression.
"""

ridge=Ridge(alpha=1.0)
lasso=Lasso(alpha=50)

# training with L2
ridge.fit(train_x,train_y)

# training with L1
lasso.fit(train_x,train_y)

# printing results with Regularization
print('-------------After Regularization-------------')
print('\nLasso Training Accuracy: ',lasso.score(train_x,train_y))
print('Lasso Testing Accuracy: ',lasso.score(test_x,test_y))
print('\nRidge Training Accuracy: ',ridge.score(train_x,train_y))
print('Ridge Testing Accuracy: ',ridge.score(test_x,test_y))

"""### **Visualization**"""

# Scatter plots of numerical features against price
numerical_cols = ['area', 'bedrooms', 'bathrooms', 'stories']
for col in numerical_cols:
    plt.figure(figsize=(8, 5))
    sns.scatterplot(x=col, y='price', data=df)
    plt.title(f'Scatter Plot of {col} vs Price')
    plt.show()

